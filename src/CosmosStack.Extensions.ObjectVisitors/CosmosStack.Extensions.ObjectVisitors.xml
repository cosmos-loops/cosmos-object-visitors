<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CosmosStack.Extensions.ObjectVisitors</name>
    </assembly>
    <members>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.AccessMode">
            <summary>
            Access mode <br />
            访问模式
            </summary>
        </member>
        <member name="F:CosmosStack.Reflection.ObjectVisitors.AccessMode.Concise">
            <summary>
            Concise mode, default <br />
            简洁模式，默认的
            </summary>
        </member>
        <member name="F:CosmosStack.Reflection.ObjectVisitors.AccessMode.Structured">
            <summary>
            Structure mode <br />
            结构化模式
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Core.CompatibleObjectCaller`1">
            <summary>
            A compatible object caller for Cosmos
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CompatibleObjectCaller`1.New">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CompatibleObjectCaller`1.GetObjInstance">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CompatibleObjectCaller`1.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CompatibleObjectCaller`1.Set(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CompatibleObjectCaller`1.GetObject(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CompatibleObjectCaller`1.GetMember(System.String)">
            <inheritdoc />
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Core.CoreCallerBase">
            <summary>
            Core caller base <br />
            核心调用基类
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CoreCallerBase.New">
            <summary>
            If it is not a static class, you can create a new instance <br />
            如果不是静态类，可以新建一个实例
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CoreCallerBase.Get``1(System.String)">
            <summary>
            Reflect strongly typed fields or attribute values by specifying generics and member names <br />
            通过指定泛型以及成员名反射出强类型的字段或者属性值
            </summary>
            <typeparam name="T">字段/属性的类型</typeparam>
            <param name="name">字段/属性名</param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.CoreCallerBase.Set(System.String,System.Object)">
            <summary>
            Set field or attribute values by specifying generics and member names <br />
            通过指定泛型以及成员名设置字段或者属性值
            </summary>
            <param name="name">字段/属性名</param>
            <param name="value">字段/属性新值</param>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase">
            <summary>
            Object caller base <br />
            对象调用基类
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.Item(System.String)">
            <summary>
            Gets or sets value by member name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.SetObjInstance(System.Object)">
            <summary>
            Sets object instance
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetObjInstance">
            <summary>
            Gets object instance 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetObject(System.String)">
            <summary>
            Get object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetMemberNames">
            <summary>
            Gets all members' name
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetCanReadMemberNames">
            <summary>
            Gets can-read member name
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetCanWriteMemberNames">
            <summary>
            Gets can-write member name
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetMembers">
            <summary>
            Gets all members
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetCanReadMembers">
            <summary>
            Gets all can-read members
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetCanWriteMembers">
            <summary>
            Gets all can-write members
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.GetMember(System.String)">
            <summary>
            Gets ObjectMember
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase.Contains(System.String)">
            <summary>
            Contains
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase`1">
            <summary>
            Object caller base <br />
            对象调用基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase`1.Instance">
            <summary>
            Gets instance
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase`1.SetInstance(`0)">
            <summary>
            Sets instance
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase`1.SetObjInstance(System.Object)">
            <summary>
            Set instance via object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase`1.GetInstance">
            <summary>
            Gets instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.ObjectCallerBase`1.GetObjInstance">
            <summary>
            Get instance by object
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.TypeHelpers.TypeAccessorExtensions.CreateTypeAccessor(System.Type)">
            <summary>
            Create TypeAccessor
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Core.TypeHelpers.TypeAccessorExtensions.CreateTypeAccessor(System.Type,System.Boolean)">
            <summary>
            Create TypeAccessor
            </summary>
            <param name="type"></param>
            <param name="allowNonPublicAccessors"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.IValidationEntry">
            <summary>
            An interface for the entry of Object Visitor Validation <br />
            对象访问器中的验证入口接口
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Correctness.IValidationEntry.StrictMode">
            <summary>
            Is strict mode <br />
            是否为严格模式
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.IValidationEntry`1">
            <summary>
            An interface for the entry of Object Visitor Validation <br />
            对象访问器中的验证入口接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Correctness.IValidationEntry`1.StrictMode">
            <summary>
            Is strict mode <br />
            是否为严格模式
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayExposeRulePackage">
            <summary>
            May exposed rule package interface
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayExposeRulePackage.ExposeRulePackage">
            <summary>
            Expose rule package <br />
            导出规则包
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayExposeRulePackage.ExposeMemberRulePackage(System.String)">
            <summary>
            Expose member rule package <br />
            导出成员规则包
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayOpsWithRulePackage">
            <summary>
            May ops with rule package interface
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayOpsWithRulePackage.SetRulePackage(CosmosStack.Validation.VerifyRulePackage,CosmosStack.Validation.VerifyRuleMode)">
            <summary>
            Set rule package <br />
            设置规则包
            </summary>
            <param name="package"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayOpsWithRulePackage.SetMemberRulePackage(System.String,CosmosStack.Validation.VerifyMemberRulePackage,CosmosStack.Validation.VerifyRuleMode)">
            <summary>
            Set member rule package <br />
            设置成员规则包
            </summary>
            <param name="name"></param>
            <param name="package"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayOpsWithRulePackage`1">
            <summary>
            May ops with rule package interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayOpsWithRulePackage`1.SetRulePackage(CosmosStack.Validation.VerifyRulePackage,CosmosStack.Validation.VerifyRuleMode)">
            <summary>
            Set rule package <br />
            设置规则包
            </summary>
            <param name="package"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayOpsWithRulePackage`1.SetMemberRulePackage(System.String,CosmosStack.Validation.VerifyMemberRulePackage,CosmosStack.Validation.VerifyRuleMode)">
            <summary>
            Set member rule package <br />
            设置成员规则包
            </summary>
            <param name="memberName"></param>
            <param name="package"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayOpsWithRulePackage`1.SetMemberRulePackage``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},CosmosStack.Validation.VerifyMemberRulePackage,CosmosStack.Validation.VerifyRuleMode)">
            <summary>
            Set member rule package <br />
            设置成员规则包
            </summary>
            <param name="expression"></param>
            <param name="package"></param>
            <param name="mode"></param>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterByStrategyForOv">
            <summary>
            May register by strategy for Object Visitor interface <br />
            可注册策略接口
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterByStrategyForOv.SetStrategy``1(CosmosStack.Validation.StrategyMode)">
            <summary>
            Set strategy <br />
            设置策略
            </summary>
            <param name="mode"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterByStrategyForOv.SetStrategy``1(``0,CosmosStack.Validation.StrategyMode)">
            <summary>
            Set strategy <br />
            设置策略
            </summary>
            <param name="strategy"></param>
            <param name="mode"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterByStrategyForOv`1">
            <summary>
            May register by strategy for Object Visitor interface <br />
            可注册策略接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterByStrategyForOv`1.SetStrategy``1(CosmosStack.Validation.StrategyMode)">
            <summary>
            Set strategy <br />
            设置策略
            </summary>
            <param name="mode"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterByStrategyForOv`1.SetStrategy``1(``0,CosmosStack.Validation.StrategyMode)">
            <summary>
            Set strategy <br />
            设置策略
            </summary>
            <param name="strategy"></param>
            <param name="mode"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv">
            <summary>
            May register for member for Object Visitor interface <br />
            可对成员进行注册接口
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv.ForMember(System.String,System.Func{CosmosStack.Validation.IValueRuleBuilder,CosmosStack.Validation.IValueRuleBuilder})">
            <summary>
            Register for member <br />
            对成员进行注册
            </summary>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv.ForMember(System.Reflection.PropertyInfo,System.Func{CosmosStack.Validation.IValueRuleBuilder,CosmosStack.Validation.IValueRuleBuilder})">
            <summary>
            Register for member <br />
            对成员进行注册
            </summary>
            <param name="propertyInfo"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv.ForMember(System.Reflection.FieldInfo,System.Func{CosmosStack.Validation.IValueRuleBuilder,CosmosStack.Validation.IValueRuleBuilder})">
            <summary>
            Register for member <br />
            对成员进行注册
            </summary>
            <param name="fieldInfo"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv`1">
            <summary>
            May register for member for Object Visitor interface <br />
            可对成员进行注册接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv`1.ForMember(System.String,System.Func{CosmosStack.Validation.IValueRuleBuilder{`0},CosmosStack.Validation.IValueRuleBuilder{`0}})">
            <summary>
            Register for member <br />
            对成员进行注册
            </summary>
            <param name="name"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv`1.ForMember(System.Reflection.PropertyInfo,System.Func{CosmosStack.Validation.IValueRuleBuilder{`0},CosmosStack.Validation.IValueRuleBuilder{`0}})">
            <summary>
            Register for member <br />
            对成员进行注册
            </summary>
            <param name="propertyInfo"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv`1.ForMember(System.Reflection.FieldInfo,System.Func{CosmosStack.Validation.IValueRuleBuilder{`0},CosmosStack.Validation.IValueRuleBuilder{`0}})">
            <summary>
            Register for member <br />
            对成员进行注册
            </summary>
            <param name="fieldInfo"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Correctness.Interfaces.IMayRegisterForMemberForOv`1.ForMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{CosmosStack.Validation.IValueRuleBuilder{`0,``0},CosmosStack.Validation.IValueRuleBuilder{`0,``0}})">
            <summary>
            Register for member <br />
            对成员进行注册
            </summary>
            <param name="expression"></param>
            <param name="func"></param>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance">
            <summary>
            Dynamic Instance <br />
            动态实例
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance.GetDynamicMemberNames">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance.ExposeVisitor">
            <summary>
            Expose Object Visitor <br />
            导出对象访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance.ExposeValueAccessor">
            <summary>
            Expose Value Accessor <br />
            导出值访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance.ExposeGetter">
            <summary>
            Expose Object Getter <br />
            导出对象获取器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance.ExposeSetter">
            <summary>
            Expose Object Setter <br />
            导出对象设置器
            </summary>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1">
            <summary>
            Dynamic Instance <br />
            动态实例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1.GetDynamicMemberNames">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1.ExposeVisitor">
            <summary>
            Expose Object Visitor <br />
            导出对象访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1.ExposeValueAccessor">
            <summary>
            Expose Value Accessor <br />
            导出值访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1.ExposeGetter">
            <summary>
            Expose Object Getter <br />
            导出对象获取器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1.ExposeSetter">
            <summary>
            Expose Object Setter <br />
            导出对象设置器
            </summary>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.GlobalVerifyProviderNames">
            <summary>
            Global verify provider names <br />
            全局验证提供者程序名
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.GlobalVerifyProviderNames.Default">
            <summary>
            Default <br />
            默认
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.GlobalVerifyProviderNames.For(System.String)">
            <summary>
            For <br />
            使用指定的名称
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentGetter">
            <summary>
            An interface for FluentGetter
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter.Instance(System.Object)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter.InitialValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initial values
            </summary>
            <param name="initialValues"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter.Value(System.Reflection.PropertyInfo)">
            <summary>
            Value
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter.Value(System.Reflection.FieldInfo)">
            <summary>
            Value
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter.Value(System.String)">
            <summary>
            Value
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1">
            <summary>
            An interface for FluentGetter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1.Instance(`0)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1.InitialValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initial values
            </summary>
            <param name="initialValues"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1.Value(System.Reflection.PropertyInfo)">
            <summary>
            Value
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1.Value(System.Reflection.FieldInfo)">
            <summary>
            Value
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1.Value(System.String)">
            <summary>
            Value
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1.Value(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentGetter`1.Value``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Value
            </summary>
            <param name="expression"></param>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentValueGetter">
            <summary>
            An interface for FluentValueGetter
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentValueGetter.Instance(System.Object)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentValueGetter`1">
            <summary>
            An interface for FluentValueGetter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentValueGetter`1.Instance(`0)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentValueGetter`2.Instance(`0)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentSetter">
            <summary>
            An interface for FluentSetter
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter.NewInstance(System.Boolean)">
            <summary>
            New Instance
            </summary>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter.Instance(System.Object,System.Boolean)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter.InitialValues(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initial values
            </summary>
            <param name="initialValues"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter.Value(System.Reflection.PropertyInfo)">
            <summary>
            Value
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter.Value(System.Reflection.FieldInfo)">
            <summary>
            Value
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter.Value(System.String)">
            <summary>
            Value
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1">
            <summary>
            An interface for FluentSetter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.NewInstance(System.Boolean)">
            <summary>
            New Instance
            </summary>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.Instance(`0,System.Boolean)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.InitialValues(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Initial values
            </summary>
            <param name="initialValues"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.Value(System.Reflection.PropertyInfo)">
            <summary>
            Value
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.Value(System.Reflection.FieldInfo)">
            <summary>
            Value
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.Value(System.String)">
            <summary>
            Value
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.Value(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentSetter`1.Value``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Value
            </summary>
            <param name="expression"></param>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentValueSetter">
            <summary>
            An interface for FluentValueSetter
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentValueSetter.Instance(System.Object,System.Boolean)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentValueSetter`1">
            <summary>
            An interface for FluentValueSetter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentValueSetter`1.Instance(`0,System.Boolean)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IFluentValueSetter`2">
            <summary>
            An interface for FluentValueSetter
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IFluentValueSetter`2.Instance(`0,System.Boolean)">
            <summary>
            Instance
            </summary>
            <param name="instance"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl">
            <summary>
            An implementation of Member Object Contract <br />
            对象的成员约定实现
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.Type">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.ObjectKind">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.IsBasicType">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetValue(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetValue(System.Object,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetMemberContract(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetMemberContract(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetMemberContract(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetMemberContract(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetMemberContracts">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetMemberContractMap">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.ContainsMember(System.String)">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.IncludeAnnotations">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.Attributes">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetAttributes``1">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetParameterAnnotations">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetQuietVerifiableAnnotations">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberObjectContractImpl.GetStrongVerifiableAnnotations">
            <inheritdoc />
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl">
            <summary>
            An Implementation of member value contract <br />
            对象的值约定实现
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.MemberName">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.MemberType">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.IsBasicType">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.MemberKind">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetValue(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.IncludeAnnotations">
            <inheritdoc />
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.Attributes">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetAttributes``1">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetParameterAnnotations">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetQuietVerifiableAnnotations(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetStrongVerifiableAnnotations(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetObjectContextVerifiableAnnotations(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetFlagAnnotations(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.GetVerifiableAnnotations(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.HasAttributeDefined``1">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.HasAttributeDefined``2">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.HasAttributeDefined``3">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.HasAttributeDefined``4">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.HasAttributeDefined``5">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.Internals.Members.MemberValueContractImpl.HasAttributeDefined``7">
            <inheritdoc />
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectGetter">
            <summary>
            An interface for ObjectGetter <br />
            对象获取器接口
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectGetter.Instance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter.GetValue(System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="memberName"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter.GetValue``1(System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="memberName"></param>
            <param name="mode"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="expression"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="expression"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter.Contains(System.String)">
            <summary>
            Contains <br />
            包含
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1">
            <summary>
            An interface for ObjectGetter <br />
            对象获取器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.Instance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.GetValue(System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="memberName"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.GetValue``1(System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="memberName"></param>
            <param name="mode"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.GetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.GetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="expression"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="expression"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="expression"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectGetter`1.Contains(System.String)">
            <summary>
            Contains <br />
            包含
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter">
            <summary>
            An interface for Object ValueGetter <br />
            值获取器接口
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter.Value">
            <summary>
            Gets value <br />
            获取值
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter.HostedInstance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter`1">
            <summary>
            An interface for Object ValueGetter <br />
            值获取器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter`1.Value">
            <summary>
            Gets value <br />
            获取值
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter`1.HostedInstance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter`2">
            <summary>
            An interface for Object ValueGetter <br />
            值获取器接口
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter`2.Value">
            <summary>
            Gets value <br />
            获取值
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueGetter`2.HostedInstance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectLooper">
            <summary>
            An interface for ObjectLopper <br />
            对象循环器接口
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectLooper.BackToVisitor">
            <summary>
            Back to ObjectVisitor <br />
            返回对象访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectLooper.Fire">
            <summary>
            Run (fire) <br />
            执行
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectLooper.FireAndBack">
            <summary>
            Run (fire) and back <br />
            执行并返回
            </summary>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectLooper`1">
            <summary>
            An interface for ObjectLopper <br />
            对象循环器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectLooper`1.BackToVisitor">
            <summary>
            Back to ObjectVisitor <br />
            返回对象访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectLooper`1.Fire">
            <summary>
            Run (fire) <br />
            执行
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectLooper`1.FireAndBack">
            <summary>
            Run (fire) and back <br />
            执行并返回
            </summary>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater">
            <summary>
            An interface for ObjectRepeater <br />
            对象重复器接口
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater.Play(System.Object)">
            <summary>
            Play <br />
            执行
            </summary>
            <param name="originalObj"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater.Play(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Play <br />
            执行
            </summary>
            <param name="keyValueCollections"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater.NewAndPlay">
            <summary>
            Play again <br />
            重新执行
            </summary>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater`1">
            <summary>
            An interface for ObjectRepeater <br />
            对象重复器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater`1.Play(`0)">
            <summary>
            Play <br />
            执行
            </summary>
            <param name="originalObj"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater`1.Play(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Play <br />
            执行
            </summary>
            <param name="keyValueCollections"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectRepeater`1.NewAndPlay">
            <summary>
            Play again <br />
            重新执行
            </summary>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`1">
            <summary>
            An interface for Object selector <br />
            对象选择器接口
            </summary>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`1.BackToVisitor">
            <summary>
            Back to ObjectVisitor <br />
            返回对象访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`1.FireAndReturn">
            <summary>
            Run (fire) and return <br />
            执行并返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`1.FireAndBack(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Run (fire) and back <br />
            执行并返回
            </summary>
            <param name="returnedVal"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`2">
            <summary>
            An interface for Object selector <br />
            对象选择器接口
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`2.BackToVisitor">
            <summary>
            Back to ObjectVisitor <br />
            返回对象访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`2.FireAndReturn">
            <summary>
            Run (fire) and return <br />
            执行并返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSelector`2.FireAndBack(System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Run (fire) and back <br />
            执行并返回
            </summary>
            <param name="returnedVal"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectSetter">
            <summary>
            An interface for ValueSetter for Type <br />
            类型值设置器接口
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.Instance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue(System.String,System.Object,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="memberName"></param>
            <param name="value"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue(System.String,System.Object,System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="memberName"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TObj"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TObj"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="keyValueCollection"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.SetValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="keyValueCollection"></param>
            <param name="globalVerifyProviderName"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter.Contains(System.String)">
            <summary>
            Contains <br />
            包含
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1">
            <summary>
            An interface for ValueSetter for Type <br />
            类型值设置器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.Instance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue(System.String,System.Object,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="memberName"></param>
            <param name="value"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue(System.String,System.Object,System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="memberName"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TObj"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TObj"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="keyValueCollection"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.SetValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="keyValueCollection"></param>
            <param name="globalVerifyProviderName"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectSetter`1.Contains(System.String)">
            <summary>
            Contains <br />
            包含
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter">
            <summary>
            An interface for ValueSetter for Object <br />
            对象值设置器接口
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter.Value(System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter.HostedInstance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter`1">
            <summary>
            An interface for ValueSetter for Object <br />
            对象值设置器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter`1.Value(System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter`1.HostedInstance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter`2">
            <summary>
            An interface for ValueSetter for Object <br />
            对象值设置器接口
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter`2.Value(`1)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectValueSetter`2.HostedInstance">
            <summary>
            Gets hosted instance <br />
            获取内部维持的对象实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor">
            <summary>
            An interface for ObjectVisitor <br />
            对象访问器接口
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SourceType">
            <summary>
            Source type <br />
            源类型
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.IsStatic">
            <summary>
            Is static class <br />
            是否为静态类型
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.AlgorithmKind">
            <summary>
            Algorithm kind <br />
            算法种类
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.Instance">
            <summary>
            Gets instance <br />
            获取实例
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.VerifiableEntry">
            <summary>
            Gets Verifiable entry <br />
            获取验证入口
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.Verify">
            <summary>
            Verify <br />
            执行验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.Verify(System.String)">
            <summary>
            Verify <br />
            执行验证
            </summary>
            <param name="globalVerifyProviderName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.VerifyAndThrow">
            <summary>
            Verify and throw if need <br />
            执行验证，如果有异常则抛出
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.VerifyAndThrow(System.String)">
            <summary>
            Verify and throw if need <br />
            执行验证，如果有异常则抛出
            </summary>
            <param name="globalVerifyProviderName"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue(System.String,System.Object,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="memberName"></param>
            <param name="value"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue(System.String,System.Object,System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="memberName"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TObj"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TObj"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="keyValueCollection"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.SetValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="keyValueCollection"></param>
            <param name="globalVerifyProviderName"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.GetValue(System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Get value <br />
            获得值
            </summary>
            <param name="memberName"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.GetValue``1(System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Get value <br />
            获得值
            </summary>
            <param name="memberName"></param>
            <param name="mode"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get value <br />
            获得值
            </summary>
            <param name="expression"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get value <br />
            获得值
            </summary>
            <param name="expression"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.Item(System.String)">
            <summary>
            Gets or sets value by the given member name <br />
            根据给定的成员名读写值
            </summary>
            <param name="memberName"></param>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.Item(System.String,CosmosStack.Reflection.ObjectVisitors.AccessMode)">
            <summary>
            Gets or sets value by the given member name <br />
            根据给定的成员名读写值
            </summary>
            <param name="memberName"></param>
            <param name="mode"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.GetMemberNames">
            <summary>
            Gets all member names <br />
            获取所有成员的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.GetMember(System.String)">
            <summary>
            Get ObjectMember info by the given member name <br />
            根据给定的成员名，获取元信息
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.Contains(System.String)">
            <summary>
            Contains <br />
            包含
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor.ToValueAccessor">
            <summary>
            Convert the Object Visitor into ValueAccessor <br />
            将对象访问器转换为值访问器
            </summary>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1">
            <summary>
            An interface for ObjectVisitor <br />
            对象访问器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.Instance">
            <summary>
            Gets instance <br />
            获取实例
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.VerifiableEntry">
            <summary>
            Gets Verifiable entry <br />
            获取验证入口
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.SetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.SetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="validationWithGlobalRules"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.SetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.String)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="expression"></param>
            <param name="value"></param>
            <param name="globalVerifyProviderName"></param>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.GetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Get value <br />
            获得值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.GetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get value <br />
            获得值
            </summary>
            <param name="expression"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.IObjectVisitor`1.GetMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get ObjectMember info by the given member name <br />
            根据给定的成员名，获取元信息
            </summary>
            <param name="expression"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind">
            <summary>
            Kind of algorithm to find tree <br />
            核心算法模式
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Metadata.ObjectMember">
            <summary>
            核心元信息
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.Metadata.ObjectOwn">
            <summary>
            Object Own <br />
            对象元信息
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectGetter">
            <summary>
            Object Getter <br />
            对象获取器
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectGetter.Type(System.Type,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="declaringType"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectGetter.Type(System.Type,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="declaringType"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectGetter.Type``1(CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="kind"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectGetter.Type``1(CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectGetter.ValueGetter">
            <summary>
            To touch a ValueGetter <br />
            获取值获取器
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectInstanceCreator">
            <summary>
            Object instance creator <br />
            对象实例创建器
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectInstanceCreator.Create(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            According to the given type, create an object of the corresponding type,
            and fill the object with the data provided in the dictionary <br />
            根据给定的类型，创建对应类型的对象，并使用字典中提供的数据填充该对象
            </summary>
            <param name="type"></param>
            <param name="keyValueCollections"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectInstanceCreator.Create(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.IObjectVisitor@,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            According to the given type, create an object of the corresponding type,
            and fill the object with the data provided in the dictionary <br />
            根据给定的类型，创建对应类型的对象，并使用字典中提供的数据填充该对象
            </summary>
            <param name="type"></param>
            <param name="keyValueCollections"></param>
            <param name="visitor"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectInstanceCreator.Create``1(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            According to the given type, create an object of the corresponding type,
            and fill the object with the data provided in the dictionary <br />
            根据给定的类型，创建对应类型的对象，并使用字典中提供的数据填充该对象
            </summary>
            <param name="keyValueCollections"></param>
            <param name="kind"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectInstanceCreator.Create``1(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0}@,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            According to the given type, create an object of the corresponding type,
            and fill the object with the data provided in the dictionary <br />
            根据给定的类型，创建对应类型的对象，并使用字典中提供的数据填充该对象
            </summary>
            <param name="keyValueCollections"></param>
            <param name="visitor"></param>
            <param name="kind"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext">
            <summary>
            Object lopping context <br />
            对象循环上下文
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext.Name">
            <summary>
            Object name <br />
            对象名
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext.Value">
            <summary>
            Value <br />
            对象值
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext.Metadata">
            <summary>
            Metadata <br />
            对象的 ObjectMember 信息
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext.Index">
            <summary>
            Index <br />
            索引
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor">
            <summary>
            Object property value accessor <br />
            对象值访问器
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.GetValue(System.String)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.GetValue(System.String,System.Reflection.BindingFlags)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.SetValue(System.String,System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.SetValue(System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.Of``1(``0)">
            <summary>
            Of <br />
            根据给定的实例，创建一个值访问器
            </summary>
            <param name="instance"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.Of(System.Object,System.Type)">
            <summary>
            Of <br />
            根据给定的实例，创建一个值访问器
            </summary>
            <param name="instance"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.OfStatic``1">
            <summary>
            Of <br />
            根据给定的静态类型，创建一个静态值访问器
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor.OfStatic(System.Type)">
            <summary>
            Of <br />
            根据给定的静态类型，创建一个静态值访问器
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor`1">
            <summary>
            Object property value accessor <br />
            对象值访问器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor`1.GetValue(System.String)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor`1.GetValue(System.String,System.Reflection.BindingFlags)">
            <summary>
            Get value <br />
            获取值
            </summary>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor`1.SetValue(System.String,System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueAccessor`1.SetValue(System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            Set value <br />
            设置值
            </summary>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueGetter">
            <summary>
            Object property value getter <br />
            值读取器
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueGetter.Invoke(System.Type,System.Object,System.String)">
            <summary>
            Invoke <br />
            调用
            </summary>
            <param name="type"></param>
            <param name="that"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueGetter.Invoke(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Invoke <br />
            调用
            </summary>
            <param name="type"></param>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueGetter.Instance">
            <summary>
            Get an instance of <see cref="T:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueGetter"/> <br />
            获取一个 ObjectPropertyValueGetter 实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueSetter">
            <summary>
            Object property value setter <br />
            值设置器
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueSetter.Invoke(System.Type,System.Object,System.String,System.Object)">
            <summary>
            Invoke <br />
            调用
            </summary>
            <param name="type"></param>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueSetter.Invoke(System.Type,System.Object,System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            Invoke <br />
            调用
            </summary>
            <param name="type"></param>
            <param name="that"></param>
            <param name="propertyName"></param>
            <param name="bindingAttr"></param>
            <param name="value"></param>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueSetter.Instance">
            <summary>
            Get an instance of <see cref="T:CosmosStack.Reflection.ObjectVisitors.ObjectPropertyValueSetter"/> <br />
            获取一个 ObjectPropertyValueSetter 实例
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectSetter">
            <summary>
            Object Setter <br />
            对象设置器，用于对对象成员的值进行设置
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectSetter.Type(System.Type,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="type"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectSetter.Type(System.Type,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectSetter.Type``1(CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="kind"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectSetter.Type``1(CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Set type <br />
            设置类型
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectSetter.ValueSetter">
            <summary>
            To touch a ValueSetter <br />
            获取值设置器
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor">
            <summary>
            Object Visitor <br />
            对象访问器
            </summary>
            <summary>
            Object Visitor <br />
            对象访问器
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create(System.Type,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given type <br />
            为给定的类型创建一个 Object Visitor 实例
            </summary>
            <param name="type"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create(System.Type,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given type <br />
            为给定的类型创建一个 Object Visitor 实例
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given type <br />
            为给定的类型创建一个 Object Visitor 实例
            </summary>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given type <br />
            为给定的类型创建一个 Object Visitor 实例
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create(System.Type,System.Object,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given object instance <br />
            为给定的对象实例创建一个 Object Visitor 实例
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create(System.Type,System.Object,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given object instance <br />
            为给定的对象实例创建一个 Object Visitor 实例
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(``0,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given object instance <br />
            为给定的对象实例创建一个 Object Visitor 实例
            </summary>
            <param name="instance"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(``0,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given object instance <br />
            为给定的对象实例创建一个 Object Visitor 实例
            </summary>
            <param name="instance"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given object instance and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，并通过给定的字典对其进行初始化
            </summary>
            <param name="type"></param>
            <param name="initialValues"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given object instance and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，并通过给定的字典对其进行初始化
            </summary>
            <param name="type"></param>
            <param name="initialValues"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given object instance and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，并通过给定的字典对其进行初始化
            </summary>
            <param name="initialValues"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given object instance and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，并通过给定的字典对其进行初始化
            </summary>
            <param name="initialValues"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Type,``0,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given type and use the specified verification strategy <br />
            为给定的类型创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="type"></param>
            <param name="validationStrategy"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Type,``0,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given type and use the specified verification strategy <br />
            为给定的类型创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="type"></param>
            <param name="validationStrategy"></param>
            <param name="options"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``2(CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given type and use the specified verification strategy <br />
            为给定的类型创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``2(CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given type and use the specified verification strategy <br />
            为给定的类型创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Type,System.Object,``0,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for a given object instance and use the specified verification strategy <br />
            为给定的对象实例创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="validationStrategy"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Type,System.Object,``0,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for a given object instance and use the specified verification strategy <br />
            为给定的对象实例创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="validationStrategy"></param>
            <param name="options"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``2(``0,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for a given object instance and use the specified verification strategy <br />
            为给定的对象实例创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="instance"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``2(``0,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for a given object instance and use the specified verification strategy <br />
            为给定的对象实例创建一个 Object Visitor 实例，并使用指定的验证策略
            </summary>
            <param name="instance"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},``0,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given object instance,
            use the specified verification strategy,
            and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，使用指定的验证策略，并通过给定的字典对其进行初始化
            </summary>
            <param name="type"></param>
            <param name="initialValues"></param>
            <param name="validationStrategy"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``1(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},``0,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given object instance,
            use the specified verification strategy,
            and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，使用指定的验证策略，并通过给定的字典对其进行初始化
            </summary>
            <param name="type"></param>
            <param name="initialValues"></param>
            <param name="validationStrategy"></param>
            <param name="options"></param>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``2(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Create an Object Visitor instance for the given object instance,
            use the specified verification strategy,
            and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，使用指定的验证策略，并通过给定的字典对其进行初始化
            </summary>
            <param name="initialValues"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Create``2(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create an Object Visitor instance for the given object instance,
            use the specified verification strategy,
            and initialize it with the given dictionary <br />
            为给定的对象实例创建一个 Object Visitor 实例，使用指定的验证策略，并通过给定的字典对其进行初始化
            </summary>
            <param name="initialValues"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TStrategy"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic">
            <summary>
            Dynamic utilities <br />
            动态工具
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForExpandoObject(System.Dynamic.ExpandoObject,System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 ExpandoObject 创建对象访问器
            </summary>
            <param name="instance"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForExpandoObject(System.Dynamic.ExpandoObject,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 ExpandoObject 创建对象访问器
            </summary>
            <param name="instance"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForExpandoObject(System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 ExpandoObject 创建对象访问器
            </summary>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForExpandoObject(CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 ExpandoObject 创建对象访问器
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForExpandoObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 ExpandoObject 创建对象访问器
            </summary>
            <param name="initialValues"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForExpandoObject(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 ExpandoObject 创建对象访问器
            </summary>
            <param name="initialValues"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject(System.Type,System.Dynamic.DynamicObject,System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="instance"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject(System.Type,System.Dynamic.DynamicObject,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject``1(``0,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="instance"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="type"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject``1(System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject(System.Type,CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject``1(CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="type"></param>
            <param name="initialValues"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="initialValues"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="type"></param>
            <param name="initialValues"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.CreateForDynamicObject``1(System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions)">
            <summary>
            Create for ExpandoObject <br />
            为 DynamicObject 创建对象访问器
            </summary>
            <param name="initialValues"></param>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.Create(CosmosStack.Reflection.ObjectVisitors.DynamicInstance)">
            <summary>
            Create for <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance"/> <br />
            为动态实例 <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance"/> 创建对象访问器
            </summary>
            <param name="instance"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitor.Dynamic.Create``1(CosmosStack.Reflection.ObjectVisitors.DynamicInstance{``0})">
            <summary>
            Create for <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1"/> <br />
            为动态实例 <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1"/> 创建对象访问器
            </summary>
            <param name="instance"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions">
            <summary>
            Object Visitor Extensions <br />
            对象访问器扩展
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ToVisitor``1(``0,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Convert an object into an Object Visitor <br />
            将一个对象实例转换为对象访问器
            </summary>
            <param name="instanceObj"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ToVisitor(System.Type,CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Convert a type into an Object Visitor <br />
            将一个类型转换为对象访问器
            </summary>
            <param name="type"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ToVisitor(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},CosmosStack.Reflection.ObjectVisitors.Metadata.AlgorithmKind,System.Boolean,System.Boolean)">
            <summary>
            Convert a dictionary into an Object Visitor according to the given type <br />
            将一个字典根据给定的类型转换为一个对象访问器
            </summary>
            <param name="type"></param>
            <param name="initialValues"></param>
            <param name="kind"></param>
            <param name="repeatable"></param>
            <param name="strictMode"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ToDynamicObject(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor)">
            <summary>
            Convert an Object Visitor into a <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance"/> instance <br />
            将一个对象访问器转换为动态实例 <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance"/>
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ToDynamicObject``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0})">
            <summary>
            Convert an Object Visitor into a <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1"/> instance <br />
            将一个对象访问器转换为动态实例 <see cref="T:CosmosStack.Reflection.ObjectVisitors.DynamicInstance`1"/>
            </summary>
            <param name="visitor"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ToDictionary(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor)">
            <summary>
            Convert an Object Visitor into a dictionary <br />
            将一个对象访问器转换为字典
            </summary>
            <param name="visitor"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ToDictionary``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0})">
            <summary>
            Convert an Object Visitor into a dictionary <br />
            将一个对象访问器转换为字典
            </summary>
            <param name="visitor"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.Select``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Func{System.String,System.Object,CosmosStack.Reflection.ObjectVisitors.Metadata.ObjectMember,``0})">
            <summary>
            Select <br />
            选择
            </summary>
            <param name="visitor"></param>
            <param name="loopFunc"></param>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.Select``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Func{System.String,System.Object,``0})">
            <summary>
            Select <br />
            选择
            </summary>
            <param name="visitor"></param>
            <param name="loopFunc"></param>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.Select``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Func{CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext,``0})">
            <summary>
            Select <br />
            选择
            </summary>
            <param name="visitor"></param>
            <param name="loopFunc"></param>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.Select``2(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Func{System.String,System.Object,CosmosStack.Reflection.ObjectVisitors.Metadata.ObjectMember,``1})">
            <summary>
            Select <br />
            选择
            </summary>
            <param name="visitor"></param>
            <param name="loopFunc"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.Select``2(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Func{System.String,System.Object,``1})">
            <summary>
            Select <br />
            选择
            </summary>
            <param name="visitor"></param>
            <param name="loopFunc"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.Select``2(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Func{CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext,``1})">
            <summary>
            Select <br />
            选择
            </summary>
            <param name="visitor"></param>
            <param name="loopFunc"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TVal"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForEach(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Action{System.String,System.Object,CosmosStack.Reflection.ObjectVisitors.Metadata.ObjectMember})">
            <summary>
            ForEach <br />
            循环
            </summary>
            <param name="visitor"></param>
            <param name="loopAct"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForEach(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Action{System.String,System.Object})">
            <summary>
            ForEach <br />
            循环
            </summary>
            <param name="visitor"></param>
            <param name="loopAct"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForEach(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Action{CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext})">
            <summary>
            ForEach <br />
            循环
            </summary>
            <param name="visitor"></param>
            <param name="loopAct"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForEach``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Action{System.String,System.Object,CosmosStack.Reflection.ObjectVisitors.Metadata.ObjectMember})">
            <summary>
            ForEach <br />
            循环
            </summary>
            <param name="visitor"></param>
            <param name="loopAct"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForEach``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Action{System.String,System.Object})">
            <summary>
            ForEach <br />
            循环
            </summary>
            <param name="visitor"></param>
            <param name="loopAct"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForEach``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Action{CosmosStack.Reflection.ObjectVisitors.ObjectLoopContext})">
            <summary>
            ForEach <br />
            循环
            </summary>
            <param name="visitor"></param>
            <param name="loopAct"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForRepeat(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor)">
            <summary>
            Repeat <br />
            重复
            </summary>
            <param name="visitor"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.ForRepeat``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0})">
            <summary>
            Repeat <br />
            重复
            </summary>
            <param name="visitor"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeat(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Object@)">
            <summary>
            Try to repeat <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="result"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeat(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Object,System.Object@)">
            <summary>
            Try to repeat <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="instance"></param>
            <param name="result"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeat(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object@)">
            <summary>
            Try to repeat <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="keyValueCollections"></param>
            <param name="result"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeat``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},``0@)">
            <summary>
            Try to repeat <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeat``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},``0,``0@)">
            <summary>
            Try to repeat <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="instance"></param>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeat``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Collections.Generic.IDictionary{System.String,System.Object},``0@)">
            <summary>
            Try to repeat <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="keyValueCollections"></param>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeatAs``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,``0@)">
            <summary>
            Try to repeat as  <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="result"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeatAs``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Object,``0@)">
            <summary>
            Try to repeat as  <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="instance"></param>
            <param name="result"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeatAs``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor,System.Collections.Generic.IDictionary{System.String,System.Object},``0@)">
            <summary>
            Try to repeat as  <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="keyValueCollections"></param>
            <param name="result"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeatAs``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},``0@)">
            <summary>
            Try to repeat as  <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeatAs``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},``0,``0@)">
            <summary>
            Try to repeat as  <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="instance"></param>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorExtensions.TryRepeatAs``1(CosmosStack.Reflection.ObjectVisitors.IObjectVisitor{``0},System.Collections.Generic.IDictionary{System.String,System.Object},``0@)">
            <summary>
            Try to repeat as  <br />
            尝试重复
            </summary>
            <param name="visitor"></param>
            <param name="keyValueCollections"></param>
            <param name="result"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions">
            <summary>
            Object Visitor Options <br />
            对象访问器选项
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.AlgorithmKind">
            <summary>
            Algorithm Kind <br />
            算法种类
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.LiteMode">
            <summary>
            Lite Mode <br />
            轻量级模式
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.Repeatable">
            <summary>
            Repeat Mode <br />
            可重复度模式
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.StrictMode">
            <summary>
            Strict Mode <br />
            严格模式
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.SilenceIfNotWritable">
            <summary>
            Silence if not writable <br />
            如果不可写，则不抛出异常
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.With(System.Action{CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions})">
            <summary>
            Use configuration <br />
            使用配置
            </summary>
            <param name="updateAct"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.Clone">
            <summary>
            Clone <br />
            克隆选项
            </summary>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.Clone(System.Action{CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions})">
            <summary>
            Clone <br />
            克隆选项
            </summary>
            <param name="updateAct"></param>
            <returns></returns>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.ObjectVisitorOptions.Default">
            <summary>
            Gets default options <br />
            获取默认选项
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.DynamicObjectSlimObjectCaller`1">
            <summary>
            Dynamic Object Slim for Object Caller <br />
            动态对象模拟
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.DynamicServiceSlimObjectMember">
            <summary>
            Dynamic Service slim for Object Member <br />
            动态服务模拟
            </summary>
        </member>
        <member name="F:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.DynamicServiceSlimObjectMember.SlimFor">
            <summary>
            Slim for ...
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.ExpandoObjectSlimObjectCaller">
            <summary>
            ExpandoObject Slim for Object Caller <br />
            ExpandoObject 模拟
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.ExpandoObjectSlimObjectCaller.Mode">
            <summary>
            Mode <br />
            模式
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.ExpandoObjectSlimObjectCaller.New">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.ExpandoObjectSlimObjectCaller.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.ExpandoObjectSlimObjectCaller.Set(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.ExpandoObjectSlimObjectCaller.GetObject(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.DynamicServices.ExpandoObjectSlimObjectCaller.GetMember(System.String)">
            <inheritdoc />
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.SlimSupported.SlimSupportedFor">
            <summary>
            Slim support for ...
            </summary>
        </member>
        <member name="F:CosmosStack.Reflection.ObjectVisitors.SlimSupported.SlimSupportedFor.DynamicObject">
            <summary>
            Dynamic Object <br />
            动态对象
            </summary>
        </member>
        <member name="F:CosmosStack.Reflection.ObjectVisitors.SlimSupported.SlimSupportedFor.ExpandoObject">
            <summary>
            ExpandoObject <br />
            动态对象
            </summary>
        </member>
        <member name="F:CosmosStack.Reflection.ObjectVisitors.SlimSupported.SlimSupportedFor.Tuple">
            <summary>
            Tuple <br />
            元组
            </summary>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1">
            <summary>
            A slim ObjectCaller for Tuple <br />
            元组服务模拟
            </summary>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1.Get``1(System.Int32)">
            <summary>
            Get member by index <br />
            根据索引获取成员
            </summary>
            <param name="index"></param>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1.Set(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1.GetObject(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1.GetObject(System.Int32)">
            <summary>
            Get object by index <br />
            根据索引获取值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1.GetMember(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectCaller`1.GetMember(System.Int32)">
            <summary>
            Get Object Member by index <br />
            根据索引获取元信息
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectMember">
            <summary>
            Tuple service slim for Object Member <br />
            元组服务模拟
            </summary>
        </member>
        <member name="P:CosmosStack.Reflection.ObjectVisitors.SlimSupported.TupleServices.TupleServiceSlimObjectMember.SlimFor">
            <summary>
            Slim for ...
            </summary>
        </member>
    </members>
</doc>
